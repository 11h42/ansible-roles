---
- name: Install PostgreSQL and requirement
  apt: pkg=postgresql,libpq-dev,python-psycopg2 state=present
  when: ansible_os_family == "Debian"
  tags: [packages,debian,postgresql]

- name: Ensure PostgreSQL is started
  service: name=postgresql state=started enabled=yes
  when: ansible_os_family == "Debian"
  tags: [debian,postgresql]

- name: Create a new database for the project
  postgresql_db: name={{ db_name }} owner={{ db_user }}
  become_user: postgres
  tags: [debian,postgresql]

- name: Create user for the app
  postgresql_user: db={{ db_name }} name={{ db_user }} state=present
  become_user: postgres
  tags: [debian,postgresql]

- name: Grant all privileges on database {{ db_name }} to {{ db_user }};
  postgresql_privs: >
      db=postgres
      obj={{ db_name }}
      privs=ALL
      type=database
      role={{ db_user }}
  become_user: postgres
  tags: [debian,postgresql]

- name: Dump database as GZip
  become_user: "{{ app_user }}"
  shell: pg_dump --username={{ db_user }} --dbname={{ db_name }} | gzip > /tmp/{{ db_dump }}
  when: db_dump is defined and db_enable_dump
  tags: [debian,postgresql,dumpdata]

- name: Fetch database dump in playbook directory
  fetch: src=/tmp/{{ db_dump }} dest=./{{ db_dump }} flat=yes fail_on_missing=yes
  when: db_dump is defined and db_enable_dump
  tags: [debian,postgresql,dumpdata]

- name: Remove database dump from remote
  file: path=/tmp/{{ db_dump }} state=absent
  when: db_dump is defined and db_enable_dump
  tags: [debian,postgresql,dumpdata]

